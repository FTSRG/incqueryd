/*
* generated by Xtext
*/
grammar InternalArchLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.bme.mit.incqueryd.arch.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.incqueryd.arch.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.incqueryd.arch.language.services.ArchLanguageGrammarAccess;

}

@parser::members {

 	private ArchLanguageGrammarAccess grammarAccess;
 	
    public InternalArchLanguageParser(TokenStream input, ArchLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Configuration";	
   	}
   	
   	@Override
   	protected ArchLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getRecipeImportsRecipeImportParserRuleCall_0_0()); 
	    }
		lv_recipeImports_0_0=ruleRecipeImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		add(
       			$current, 
       			"recipeImports",
        		lv_recipeImports_0_0, 
        		"RecipeImport");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getMappingsInfrastructureMappingParserRuleCall_1_0()); 
	    }
		lv_mappings_1_0=ruleInfrastructureMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_1_0, 
        		"InfrastructureMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRecipeImport
entryRuleRecipeImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecipeImportRule()); }
	 iv_ruleRecipeImport=ruleRecipeImport 
	 { $current=$iv_ruleRecipeImport.current; } 
	 EOF 
;

// Rule RecipeImport
ruleRecipeImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='recipe' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecipeImportAccess().getRecipeKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getRecipeImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecipeImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleInfrastructureMapping
entryRuleInfrastructureMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInfrastructureMappingRule()); }
	 iv_ruleInfrastructureMapping=ruleInfrastructureMapping 
	 { $current=$iv_ruleInfrastructureMapping.current; } 
	 EOF 
;

// Rule InfrastructureMapping
ruleInfrastructureMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='use' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInfrastructureMappingAccess().getUseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureMappingAccess().getMachineMachineParserRuleCall_1_0()); 
	    }
		lv_machine_1_0=ruleMachine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureMappingRule());
	        }
       		set(
       			$current, 
       			"machine",
        		lv_machine_1_0, 
        		"Machine");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInfrastructureMappingAccess().getForKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureMappingAccess().getRolesRoleParserRuleCall_3_0()); 
	    }
		lv_roles_3_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureMappingRule());
	        }
       		add(
       			$current, 
       			"roles",
        		lv_roles_3_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInfrastructureMappingAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureMappingAccess().getRolesRoleParserRuleCall_4_1_0()); 
	    }
		lv_roles_5_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureMappingRule());
	        }
       		add(
       			$current, 
       			"roles",
        		lv_roles_5_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	 iv_ruleMachine=ruleMachine 
	 { $current=$iv_ruleMachine.current; } 
	 EOF 
;

// Rule Machine
ruleMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_ip_0_0=RULE_IP
		{
			newLeafNode(lv_ip_0_0, grammarAccess.getMachineAccess().getIpIPTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMachineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ip",
        		lv_ip_0_0, 
        		"IP");
	    }

)
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRoleAccess().getReteRoleParserRuleCall_0()); 
    }
    this_ReteRole_0=ruleReteRole
    { 
        $current = $this_ReteRole_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRoleAccess().getCacheRoleParserRuleCall_1()); 
    }
    this_CacheRole_1=ruleCacheRole
    { 
        $current = $this_CacheRole_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReteRole
entryRuleReteRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReteRoleRule()); }
	 iv_ruleReteRole=ruleReteRole 
	 { $current=$iv_ruleReteRole.current; } 
	 EOF 
;

// Rule ReteRole
ruleReteRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReteRoleRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReteRoleAccess().getNodeRecipeReteNodeRecipeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleCacheRole
entryRuleCacheRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCacheRoleRule()); }
	 iv_ruleCacheRole=ruleCacheRole 
	 { $current=$iv_ruleCacheRole.current; } 
	 EOF 
;

// Rule CacheRole
ruleCacheRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCacheRoleAccess().getCacheRoleAction_0(),
            $current);
    }
)	otherlv_1='cache' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCacheRoleAccess().getCacheKeyword_1());
    }
)
;





RULE_IP : RULE_INT '.' RULE_INT '.' RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


