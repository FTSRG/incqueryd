grammar org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage with org.eclipse.incquery.patternlanguage.PatternLanguage

import "http://www.eclipse.org/incquery/patternlanguage/PatternLanguage" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rdfPatternLanguage "http://www.eclipse.org/incquery/patternlanguage/rdf/RdfPatternLanguage"

RdfPatternModel returns core::PatternModel:
	{RdfPatternModel}
	vocabularies+=Vocabulary*
	('base' baseIriValue=RawIri)?
	iriPrefixes+=IriPrefix*
	patterns+=Pattern*
;

Vocabulary:
	'vocabulary' location=RawIri
;

IriPrefix:
	'prefix' name=ID ':' value=RawIri
;

Iri:
	prefix=[IriPrefix] ':' value=ID |
	value=RawIri
;

Parameter returns Variable:
	name=ID
;

Constraint returns core::Constraint:
	PatternCompositionConstraint |
	CompareConstraint |
	RdfClassConstraint |
	RdfPropertyConstraint |
	RdfCheckConstraint
;

RdfClassConstraint:
	type=TypeId '(' variable=VariableReference ')'
;

RdfPropertyConstraint:
	refType=TypeId '(' source=ValueReference ',' target=ValueReference ')'
;

TypeId:
	Iri |
	Label
;

Label:
	label=STRING
;

RdfCheckConstraint:
	'check' '(' expression=STRING ')'
;

ValueReference returns core::ValueReference:
	LiteralValueReference |
	VariableValue |
	AggregatedValue
;

LiteralValueReference returns core::LiteralValueReference:
	IntValue |
	DoubleValue |
	StringValue |
	BoolValue |
	RdfLiteral |
	Iri
;

RdfLiteral:
	lexicalForm=STRING (('^^' datatype=Iri) | ('@' language=ID))
;

RawIri returns ecore::EString:
	RAW_IRI
;

terminal RAW_IRI:
	'<' ('\\>' | !'>')* '>'
;