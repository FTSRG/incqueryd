/*
 * generated by Xtext 2.9.0.rc2
 */
package org.eclipse.incquery.patternlanguage.rdf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.incquery.patternlanguage.services.PatternLanguageGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class RdfPatternLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RdfPatternModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RdfPatternModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRdfPatternModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVocabulariesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVocabulariesVocabularyParserRuleCall_1_0 = (RuleCall)cVocabulariesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBaseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseIriValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBaseIriValueRawIriParserRuleCall_2_1_0 = (RuleCall)cBaseIriValueAssignment_2_1.eContents().get(0);
		private final Assignment cIriPrefixesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIriPrefixesIriPrefixParserRuleCall_3_0 = (RuleCall)cIriPrefixesAssignment_3.eContents().get(0);
		private final Assignment cPatternsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternsPatternParserRuleCall_4_0 = (RuleCall)cPatternsAssignment_4.eContents().get(0);
		
		//RdfPatternModel core::PatternModel:
		//	{RdfPatternModel} vocabularies+=Vocabulary* ('base' baseIriValue=RawIri)?
		//	iriPrefixes+=IriPrefix*
		//	patterns+=Pattern*
		@Override public ParserRule getRule() { return rule; }
		
		//{RdfPatternModel} vocabularies+=Vocabulary* ('base' baseIriValue=RawIri)? iriPrefixes+=IriPrefix* patterns+=Pattern*
		public Group getGroup() { return cGroup; }
		
		//{RdfPatternModel}
		public Action getRdfPatternModelAction_0() { return cRdfPatternModelAction_0; }
		
		//vocabularies+=Vocabulary*
		public Assignment getVocabulariesAssignment_1() { return cVocabulariesAssignment_1; }
		
		//Vocabulary
		public RuleCall getVocabulariesVocabularyParserRuleCall_1_0() { return cVocabulariesVocabularyParserRuleCall_1_0; }
		
		//('base' baseIriValue=RawIri)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'base'
		public Keyword getBaseKeyword_2_0() { return cBaseKeyword_2_0; }
		
		//baseIriValue=RawIri
		public Assignment getBaseIriValueAssignment_2_1() { return cBaseIriValueAssignment_2_1; }
		
		//RawIri
		public RuleCall getBaseIriValueRawIriParserRuleCall_2_1_0() { return cBaseIriValueRawIriParserRuleCall_2_1_0; }
		
		//iriPrefixes+=IriPrefix*
		public Assignment getIriPrefixesAssignment_3() { return cIriPrefixesAssignment_3; }
		
		//IriPrefix
		public RuleCall getIriPrefixesIriPrefixParserRuleCall_3_0() { return cIriPrefixesIriPrefixParserRuleCall_3_0; }
		
		//patterns+=Pattern*
		public Assignment getPatternsAssignment_4() { return cPatternsAssignment_4; }
		
		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_4_0() { return cPatternsPatternParserRuleCall_4_0; }
	}
	public class VocabularyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.Vocabulary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVocabularyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationRawIriParserRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		
		//Vocabulary:
		//	'vocabulary' location=RawIri;
		@Override public ParserRule getRule() { return rule; }
		
		//'vocabulary' location=RawIri
		public Group getGroup() { return cGroup; }
		
		//'vocabulary'
		public Keyword getVocabularyKeyword_0() { return cVocabularyKeyword_0; }
		
		//location=RawIri
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//RawIri
		public RuleCall getLocationRawIriParserRuleCall_1_0() { return cLocationRawIriParserRuleCall_1_0; }
	}
	public class IriPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.IriPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRawIriParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IriPrefix:
		//	'prefix' name=ID ':' value=RawIri;
		@Override public ParserRule getRule() { return rule; }
		
		//'prefix' name=ID ':' value=RawIri
		public Group getGroup() { return cGroup; }
		
		//'prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=RawIri
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//RawIri
		public RuleCall getValueRawIriParserRuleCall_3_0() { return cValueRawIriParserRuleCall_3_0; }
	}
	public class IriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.Iri");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrefixAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPrefixIriPrefixCrossReference_0_0_0 = (CrossReference)cPrefixAssignment_0_0.eContents().get(0);
		private final RuleCall cPrefixIriPrefixIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPrefixIriPrefixCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueRawIriParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Iri:
		//	prefix=[IriPrefix] ':' value=ID | value=RawIri;
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=[IriPrefix] ':' value=ID | value=RawIri
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//prefix=[IriPrefix] ':' value=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//prefix=[IriPrefix]
		public Assignment getPrefixAssignment_0_0() { return cPrefixAssignment_0_0; }
		
		//[IriPrefix]
		public CrossReference getPrefixIriPrefixCrossReference_0_0_0() { return cPrefixIriPrefixCrossReference_0_0_0; }
		
		//ID
		public RuleCall getPrefixIriPrefixIDTerminalRuleCall_0_0_0_1() { return cPrefixIriPrefixIDTerminalRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//value=ID
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_2_0() { return cValueIDTerminalRuleCall_0_2_0; }
		
		//value=RawIri
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//RawIri
		public RuleCall getValueRawIriParserRuleCall_1_0() { return cValueRawIriParserRuleCall_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter Variable:
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternCompositionConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRdfClassConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRdfPropertyConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRdfCheckConstraintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Constraint core::Constraint:
		//	PatternCompositionConstraint | CompareConstraint | RdfClassConstraint | RdfPropertyConstraint | RdfCheckConstraint
		@Override public ParserRule getRule() { return rule; }
		
		//PatternCompositionConstraint | CompareConstraint | RdfClassConstraint | RdfPropertyConstraint | RdfCheckConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PatternCompositionConstraint
		public RuleCall getPatternCompositionConstraintParserRuleCall_0() { return cPatternCompositionConstraintParserRuleCall_0; }
		
		//CompareConstraint
		public RuleCall getCompareConstraintParserRuleCall_1() { return cCompareConstraintParserRuleCall_1; }
		
		//RdfClassConstraint
		public RuleCall getRdfClassConstraintParserRuleCall_2() { return cRdfClassConstraintParserRuleCall_2; }
		
		//RdfPropertyConstraint
		public RuleCall getRdfPropertyConstraintParserRuleCall_3() { return cRdfPropertyConstraintParserRuleCall_3; }
		
		//RdfCheckConstraint
		public RuleCall getRdfCheckConstraintParserRuleCall_4() { return cRdfCheckConstraintParserRuleCall_4; }
	}
	public class RdfClassConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RdfClassConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeIdParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableReferenceParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RdfClassConstraint:
		//	type=TypeId '(' variable=VariableReference ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeId '(' variable=VariableReference ')'
		public Group getGroup() { return cGroup; }
		
		//type=TypeId
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeId
		public RuleCall getTypeTypeIdParserRuleCall_0_0() { return cTypeTypeIdParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=VariableReference
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_2_0() { return cVariableVariableReferenceParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RdfPropertyConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RdfPropertyConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefTypeTypeIdParserRuleCall_0_0 = (RuleCall)cRefTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceValueReferenceParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetValueReferenceParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RdfPropertyConstraint:
		//	refType=TypeId '(' source=ValueReference ',' target=ValueReference ')';
		@Override public ParserRule getRule() { return rule; }
		
		//refType=TypeId '(' source=ValueReference ',' target=ValueReference ')'
		public Group getGroup() { return cGroup; }
		
		//refType=TypeId
		public Assignment getRefTypeAssignment_0() { return cRefTypeAssignment_0; }
		
		//TypeId
		public RuleCall getRefTypeTypeIdParserRuleCall_0_0() { return cRefTypeTypeIdParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//source=ValueReference
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//ValueReference
		public RuleCall getSourceValueReferenceParserRuleCall_2_0() { return cSourceValueReferenceParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//target=ValueReference
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//ValueReference
		public RuleCall getTargetValueReferenceParserRuleCall_4_0() { return cTargetValueReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.TypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIriParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeId:
		//	Iri | Label;
		@Override public ParserRule getRule() { return rule; }
		
		//Iri | Label
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Iri
		public RuleCall getIriParserRuleCall_0() { return cIriParserRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.Label");
		private final Assignment cLabelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0 = (RuleCall)cLabelAssignment.eContents().get(0);
		
		//Label:
		//	label=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//label=STRING
		public Assignment getLabelAssignment() { return cLabelAssignment; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0() { return cLabelSTRINGTerminalRuleCall_0; }
	}
	public class RdfCheckConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RdfCheckConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RdfCheckConstraint:
		//	'check' '(' expression=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'check' '(' expression=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_2_0() { return cExpressionSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.ValueReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAggregatedValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueReference core::ValueReference:
		//	LiteralValueReference | VariableValue | AggregatedValue
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralValueReference | VariableValue | AggregatedValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralValueReference
		public RuleCall getLiteralValueReferenceParserRuleCall_0() { return cLiteralValueReferenceParserRuleCall_0; }
		
		//VariableValue
		public RuleCall getVariableValueParserRuleCall_1() { return cVariableValueParserRuleCall_1; }
		
		//AggregatedValue
		public RuleCall getAggregatedValueParserRuleCall_2() { return cAggregatedValueParserRuleCall_2; }
	}
	public class LiteralValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.LiteralValueReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRdfLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIriParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//LiteralValueReference core::LiteralValueReference:
		//	IntValue | DoubleValue | StringValue | BoolValue | RdfLiteral | Iri
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | DoubleValue | StringValue | BoolValue | RdfLiteral | Iri
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_1() { return cDoubleValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_3() { return cBoolValueParserRuleCall_3; }
		
		//RdfLiteral
		public RuleCall getRdfLiteralParserRuleCall_4() { return cRdfLiteralParserRuleCall_4; }
		
		//Iri
		public RuleCall getIriParserRuleCall_5() { return cIriParserRuleCall_5; }
	}
	public class RdfLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RdfLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLexicalFormAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLexicalFormSTRINGTerminalRuleCall_0_0 = (RuleCall)cLexicalFormAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDatatypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDatatypeIriParserRuleCall_1_0_1_0 = (RuleCall)cDatatypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLanguageAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLanguageIDTerminalRuleCall_1_1_1_0 = (RuleCall)cLanguageAssignment_1_1_1.eContents().get(0);
		
		//RdfLiteral:
		//	lexicalForm=STRING ('^^' datatype=Iri | '@' language=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//lexicalForm=STRING ('^^' datatype=Iri | '@' language=ID)
		public Group getGroup() { return cGroup; }
		
		//lexicalForm=STRING
		public Assignment getLexicalFormAssignment_0() { return cLexicalFormAssignment_0; }
		
		//STRING
		public RuleCall getLexicalFormSTRINGTerminalRuleCall_0_0() { return cLexicalFormSTRINGTerminalRuleCall_0_0; }
		
		//('^^' datatype=Iri | '@' language=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'^^' datatype=Iri
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'^^'
		public Keyword getCircumflexAccentCircumflexAccentKeyword_1_0_0() { return cCircumflexAccentCircumflexAccentKeyword_1_0_0; }
		
		//datatype=Iri
		public Assignment getDatatypeAssignment_1_0_1() { return cDatatypeAssignment_1_0_1; }
		
		//Iri
		public RuleCall getDatatypeIriParserRuleCall_1_0_1_0() { return cDatatypeIriParserRuleCall_1_0_1_0; }
		
		//'@' language=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_1_0() { return cCommercialAtKeyword_1_1_0; }
		
		//language=ID
		public Assignment getLanguageAssignment_1_1_1() { return cLanguageAssignment_1_1_1; }
		
		//ID
		public RuleCall getLanguageIDTerminalRuleCall_1_1_1_0() { return cLanguageIDTerminalRuleCall_1_1_1_0; }
	}
	public class RawIriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RawIri");
		private final RuleCall cRAW_IRITerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RawIri:
		//	RAW_IRI;
		@Override public ParserRule getRule() { return rule; }
		
		//RAW_IRI
		public RuleCall getRAW_IRITerminalRuleCall() { return cRAW_IRITerminalRuleCall; }
	}
	
	
	private final RdfPatternModelElements pRdfPatternModel;
	private final VocabularyElements pVocabulary;
	private final IriPrefixElements pIriPrefix;
	private final IriElements pIri;
	private final ParameterElements pParameter;
	private final ConstraintElements pConstraint;
	private final RdfClassConstraintElements pRdfClassConstraint;
	private final RdfPropertyConstraintElements pRdfPropertyConstraint;
	private final TypeIdElements pTypeId;
	private final LabelElements pLabel;
	private final RdfCheckConstraintElements pRdfCheckConstraint;
	private final ValueReferenceElements pValueReference;
	private final LiteralValueReferenceElements pLiteralValueReference;
	private final RdfLiteralElements pRdfLiteral;
	private final RawIriElements pRawIri;
	private final TerminalRule tRAW_IRI;
	
	private final Grammar grammar;
	
	private final PatternLanguageGrammarAccess gaPatternLanguage;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public RdfPatternLanguageGrammarAccess(GrammarProvider grammarProvider,
			PatternLanguageGrammarAccess gaPatternLanguage,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaPatternLanguage = gaPatternLanguage;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pRdfPatternModel = new RdfPatternModelElements();
		this.pVocabulary = new VocabularyElements();
		this.pIriPrefix = new IriPrefixElements();
		this.pIri = new IriElements();
		this.pParameter = new ParameterElements();
		this.pConstraint = new ConstraintElements();
		this.pRdfClassConstraint = new RdfClassConstraintElements();
		this.pRdfPropertyConstraint = new RdfPropertyConstraintElements();
		this.pTypeId = new TypeIdElements();
		this.pLabel = new LabelElements();
		this.pRdfCheckConstraint = new RdfCheckConstraintElements();
		this.pValueReference = new ValueReferenceElements();
		this.pLiteralValueReference = new LiteralValueReferenceElements();
		this.pRdfLiteral = new RdfLiteralElements();
		this.pRawIri = new RawIriElements();
		this.tRAW_IRI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage.RAW_IRI");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public PatternLanguageGrammarAccess getPatternLanguageGrammarAccess() {
		return gaPatternLanguage;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//RdfPatternModel core::PatternModel:
	//	{RdfPatternModel} vocabularies+=Vocabulary* ('base' baseIriValue=RawIri)?
	//	iriPrefixes+=IriPrefix*
	//	patterns+=Pattern*
	public RdfPatternModelElements getRdfPatternModelAccess() {
		return pRdfPatternModel;
	}
	
	public ParserRule getRdfPatternModelRule() {
		return getRdfPatternModelAccess().getRule();
	}
	
	//Vocabulary:
	//	'vocabulary' location=RawIri;
	public VocabularyElements getVocabularyAccess() {
		return pVocabulary;
	}
	
	public ParserRule getVocabularyRule() {
		return getVocabularyAccess().getRule();
	}
	
	//IriPrefix:
	//	'prefix' name=ID ':' value=RawIri;
	public IriPrefixElements getIriPrefixAccess() {
		return pIriPrefix;
	}
	
	public ParserRule getIriPrefixRule() {
		return getIriPrefixAccess().getRule();
	}
	
	//Iri:
	//	prefix=[IriPrefix] ':' value=ID | value=RawIri;
	public IriElements getIriAccess() {
		return pIri;
	}
	
	public ParserRule getIriRule() {
		return getIriAccess().getRule();
	}
	
	//Parameter Variable:
	//	name=ID
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Constraint core::Constraint:
	//	PatternCompositionConstraint | CompareConstraint | RdfClassConstraint | RdfPropertyConstraint | RdfCheckConstraint
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//RdfClassConstraint:
	//	type=TypeId '(' variable=VariableReference ')';
	public RdfClassConstraintElements getRdfClassConstraintAccess() {
		return pRdfClassConstraint;
	}
	
	public ParserRule getRdfClassConstraintRule() {
		return getRdfClassConstraintAccess().getRule();
	}
	
	//RdfPropertyConstraint:
	//	refType=TypeId '(' source=ValueReference ',' target=ValueReference ')';
	public RdfPropertyConstraintElements getRdfPropertyConstraintAccess() {
		return pRdfPropertyConstraint;
	}
	
	public ParserRule getRdfPropertyConstraintRule() {
		return getRdfPropertyConstraintAccess().getRule();
	}
	
	//TypeId:
	//	Iri | Label;
	public TypeIdElements getTypeIdAccess() {
		return pTypeId;
	}
	
	public ParserRule getTypeIdRule() {
		return getTypeIdAccess().getRule();
	}
	
	//Label:
	//	label=STRING;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//RdfCheckConstraint:
	//	'check' '(' expression=STRING ')';
	public RdfCheckConstraintElements getRdfCheckConstraintAccess() {
		return pRdfCheckConstraint;
	}
	
	public ParserRule getRdfCheckConstraintRule() {
		return getRdfCheckConstraintAccess().getRule();
	}
	
	//ValueReference core::ValueReference:
	//	LiteralValueReference | VariableValue | AggregatedValue
	public ValueReferenceElements getValueReferenceAccess() {
		return pValueReference;
	}
	
	public ParserRule getValueReferenceRule() {
		return getValueReferenceAccess().getRule();
	}
	
	//LiteralValueReference core::LiteralValueReference:
	//	IntValue | DoubleValue | StringValue | BoolValue | RdfLiteral | Iri
	public LiteralValueReferenceElements getLiteralValueReferenceAccess() {
		return pLiteralValueReference;
	}
	
	public ParserRule getLiteralValueReferenceRule() {
		return getLiteralValueReferenceAccess().getRule();
	}
	
	//RdfLiteral:
	//	lexicalForm=STRING ('^^' datatype=Iri | '@' language=ID);
	public RdfLiteralElements getRdfLiteralAccess() {
		return pRdfLiteral;
	}
	
	public ParserRule getRdfLiteralRule() {
		return getRdfLiteralAccess().getRule();
	}
	
	//RawIri:
	//	RAW_IRI;
	public RawIriElements getRawIriAccess() {
		return pRawIri;
	}
	
	public ParserRule getRawIriRule() {
		return getRawIriAccess().getRule();
	}
	
	//terminal RAW_IRI:
	//	'<' ('\\>' | !'>')* '>';
	public TerminalRule getRAW_IRIRule() {
		return tRAW_IRI;
	}
	
	//PatternModel:
	//	('package' packageName=QualifiedName)?
	//	patterns+=Pattern*;
	public PatternLanguageGrammarAccess.PatternModelElements getPatternModelAccess() {
		return gaPatternLanguage.getPatternModelAccess();
	}
	
	public ParserRule getPatternModelRule() {
		return getPatternModelAccess().getRule();
	}
	
	//Pattern:
	//	annotations+=Annotation*
	//	modifiers+=Modifiers*
	//	'pattern'
	//	name=ID
	//	'(' (parameters+=super::Parameter (',' parameters+=super::Parameter)*)?
	//	')'
	//	'='?
	//	bodies+=PatternBody ('or' bodies+=PatternBody)*;
	public PatternLanguageGrammarAccess.PatternElements getPatternAccess() {
		return gaPatternLanguage.getPatternAccess();
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Annotation:
	//	'@'
	//	name=ID ('(' parameters+=AnnotationParameter (',' parameters+=AnnotationParameter)* ')')?;
	public PatternLanguageGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaPatternLanguage.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationParameter:
	//	name=ID '=' value=AnnotationValueReference;
	public PatternLanguageGrammarAccess.AnnotationParameterElements getAnnotationParameterAccess() {
		return gaPatternLanguage.getAnnotationParameterAccess();
	}
	
	public ParserRule getAnnotationParameterRule() {
		return getAnnotationParameterAccess().getRule();
	}
	
	//Modifiers:
	//	private?='private';
	public PatternLanguageGrammarAccess.ModifiersElements getModifiersAccess() {
		return gaPatternLanguage.getModifiersAccess();
	}
	
	public ParserRule getModifiersRule() {
		return getModifiersAccess().getRule();
	}
	
	//Variable types::JvmIdentifiableElement:
	//	{Variable} name=ID (':' type=Type)?
	public PatternLanguageGrammarAccess.VariableElements getVariableAccess() {
		return gaPatternLanguage.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//ParameterRef Variable:
	//	{ParameterRef} name=ID
	//	referredParam=[Variable] (':' type=Type)?
	public PatternLanguageGrammarAccess.ParameterRefElements getParameterRefAccess() {
		return gaPatternLanguage.getParameterRefAccess();
	}
	
	public ParserRule getParameterRefRule() {
		return getParameterRefAccess().getRule();
	}
	
	//LocalVariable Variable:
	//	{LocalVariable} name=ID (':' type=Type)?
	public PatternLanguageGrammarAccess.LocalVariableElements getLocalVariableAccess() {
		return gaPatternLanguage.getLocalVariableAccess();
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//VariableReference:
	//	var=ID;
	public PatternLanguageGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaPatternLanguage.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	////These types are not meant to be written directly, just in the desc languages
	//Type:
	//	{EntityType} typename=ID;
	public PatternLanguageGrammarAccess.TypeElements getTypeAccess() {
		return gaPatternLanguage.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////These types are not meant to be written directly, just in the desc languages
	//RefType Type:
	//	{RelationType} typename=ID
	public PatternLanguageGrammarAccess.RefTypeElements getRefTypeAccess() {
		return gaPatternLanguage.getRefTypeAccess();
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}
	
	//PatternBody:
	//	{PatternBody} name=ID?
	//	'{' (constraints+=super::Constraint ';')*
	//	'}';
	public PatternLanguageGrammarAccess.PatternBodyElements getPatternBodyAccess() {
		return gaPatternLanguage.getPatternBodyAccess();
	}
	
	public ParserRule getPatternBodyRule() {
		return getPatternBodyAccess().getRule();
	}
	
	//PatternCompositionConstraint Constraint:
	//	{PatternCompositionConstraint} negative?='neg'? call=PatternCall
	public PatternLanguageGrammarAccess.PatternCompositionConstraintElements getPatternCompositionConstraintAccess() {
		return gaPatternLanguage.getPatternCompositionConstraintAccess();
	}
	
	public ParserRule getPatternCompositionConstraintRule() {
		return getPatternCompositionConstraintAccess().getRule();
	}
	
	////'count' 'find' patternRef=[Pattern] '(' (parameters+=ValueReference (','
	////parameters+=ValueReference)*)? ')';
	//PatternCall:
	//	'find' patternRef=[Pattern|QualifiedName] transitive?='+'? '(' (parameters+=super::ValueReference (','
	//	parameters+=super::ValueReference)*)? ')';
	public PatternLanguageGrammarAccess.PatternCallElements getPatternCallAccess() {
		return gaPatternLanguage.getPatternCallAccess();
	}
	
	public ParserRule getPatternCallRule() {
		return getPatternCallAccess().getRule();
	}
	
	//CompareConstraint Constraint:
	//	{CompareConstraint} leftOperand=super::ValueReference feature=CompareFeature rightOperand=super::ValueReference
	public PatternLanguageGrammarAccess.CompareConstraintElements getCompareConstraintAccess() {
		return gaPatternLanguage.getCompareConstraintAccess();
	}
	
	public ParserRule getCompareConstraintRule() {
		return getCompareConstraintAccess().getRule();
	}
	
	//enum CompareFeature:
	//	equality='==' | inequality='!=';
	public PatternLanguageGrammarAccess.CompareFeatureElements getCompareFeatureAccess() {
		return gaPatternLanguage.getCompareFeatureAccess();
	}
	
	public EnumRule getCompareFeatureRule() {
		return getCompareFeatureAccess().getRule();
	}
	
	//CheckConstraint Constraint:
	//	{CheckConstraint} 'check' '(' expression=XExpression ')'
	public PatternLanguageGrammarAccess.CheckConstraintElements getCheckConstraintAccess() {
		return gaPatternLanguage.getCheckConstraintAccess();
	}
	
	public ParserRule getCheckConstraintRule() {
		return getCheckConstraintAccess().getRule();
	}
	
	//PathExpressionConstraint Constraint:
	//	{PathExpressionConstraint} head=PathExpressionHead
	public PatternLanguageGrammarAccess.PathExpressionConstraintElements getPathExpressionConstraintAccess() {
		return gaPatternLanguage.getPathExpressionConstraintAccess();
	}
	
	public ParserRule getPathExpressionConstraintRule() {
		return getPathExpressionConstraintAccess().getRule();
	}
	
	//PathExpressionHead PathExpressionElement:
	//	{PathExpressionHead} type=Type '.' tail=PathExpressionTail '(' src=VariableReference ',' dst=super::ValueReference ')'
	public PatternLanguageGrammarAccess.PathExpressionHeadElements getPathExpressionHeadAccess() {
		return gaPatternLanguage.getPathExpressionHeadAccess();
	}
	
	public ParserRule getPathExpressionHeadRule() {
		return getPathExpressionHeadAccess().getRule();
	}
	
	//PathExpressionTail PathExpressionElement:
	//	{PathExpressionTail} type=RefType ('[' index=INT ']')? closure?='*'? ('.' tail=PathExpressionTail)?
	public PatternLanguageGrammarAccess.PathExpressionTailElements getPathExpressionTailAccess() {
		return gaPatternLanguage.getPathExpressionTailAccess();
	}
	
	public ParserRule getPathExpressionTailRule() {
		return getPathExpressionTailAccess().getRule();
	}
	
	//AnnotationValueReference ValueReference:
	//	super::ValueReference | ListValue
	public PatternLanguageGrammarAccess.AnnotationValueReferenceElements getAnnotationValueReferenceAccess() {
		return gaPatternLanguage.getAnnotationValueReferenceAccess();
	}
	
	public ParserRule getAnnotationValueReferenceRule() {
		return getAnnotationValueReferenceAccess().getRule();
	}
	
	//IntValue LiteralValueReference:
	//	{IntValue} value=INTNUMBER
	public PatternLanguageGrammarAccess.IntValueElements getIntValueAccess() {
		return gaPatternLanguage.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//INTNUMBER ecore::EInt:
	//	'-'? INT
	public PatternLanguageGrammarAccess.INTNUMBERElements getINTNUMBERAccess() {
		return gaPatternLanguage.getINTNUMBERAccess();
	}
	
	public ParserRule getINTNUMBERRule() {
		return getINTNUMBERAccess().getRule();
	}
	
	//StringValue LiteralValueReference:
	//	{StringValue} value=STRING
	public PatternLanguageGrammarAccess.StringValueElements getStringValueAccess() {
		return gaPatternLanguage.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BoolValue LiteralValueReference:
	//	{BoolValue} value=BOOLEAN
	public PatternLanguageGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaPatternLanguage.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//BOOLEAN ecore::EBoolean:
	//	'true' | 'false' | 'TRUE' | 'FALSE'
	public PatternLanguageGrammarAccess.BOOLEANElements getBOOLEANAccess() {
		return gaPatternLanguage.getBOOLEANAccess();
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//DoubleValue LiteralValueReference:
	//	{DoubleValue} value=DOUBLE
	public PatternLanguageGrammarAccess.DoubleValueElements getDoubleValueAccess() {
		return gaPatternLanguage.getDoubleValueAccess();
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}
	
	//DOUBLE ecore::EDouble:
	//	'-'? INT '.' INT
	public PatternLanguageGrammarAccess.DOUBLEElements getDOUBLEAccess() {
		return gaPatternLanguage.getDOUBLEAccess();
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//VariableValue ValueReference:
	//	{VariableValue} value=VariableReference
	public PatternLanguageGrammarAccess.VariableValueElements getVariableValueAccess() {
		return gaPatternLanguage.getVariableValueAccess();
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//ListValue LiteralValueReference:
	//	{ListValue} '{' values+=super::ValueReference (',' values+=super::ValueReference)* '}'
	public PatternLanguageGrammarAccess.ListValueElements getListValueAccess() {
		return gaPatternLanguage.getListValueAccess();
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//ComputationValue ValueReference:
	//	AggregatedValue | FunctionEvaluationValue
	public PatternLanguageGrammarAccess.ComputationValueElements getComputationValueAccess() {
		return gaPatternLanguage.getComputationValueAccess();
	}
	
	public ParserRule getComputationValueRule() {
		return getComputationValueAccess().getRule();
	}
	
	//FunctionEvaluationValue ComputationValue:
	//	{FunctionEvaluationValue} 'eval' '(' expression=XExpression ')'
	public PatternLanguageGrammarAccess.FunctionEvaluationValueElements getFunctionEvaluationValueAccess() {
		return gaPatternLanguage.getFunctionEvaluationValueAccess();
	}
	
	public ParserRule getFunctionEvaluationValueRule() {
		return getFunctionEvaluationValueAccess().getRule();
	}
	
	//AggregatedValue ComputationValue:
	//	{AggregatedValue} aggregator=AggregatorExpression call=PatternCall
	public PatternLanguageGrammarAccess.AggregatedValueElements getAggregatedValueAccess() {
		return gaPatternLanguage.getAggregatedValueAccess();
	}
	
	public ParserRule getAggregatedValueRule() {
		return getAggregatedValueAccess().getRule();
	}
	
	//AggregatorExpression:
	//	{CountAggregator} 'count';
	public PatternLanguageGrammarAccess.AggregatorExpressionElements getAggregatorExpressionAccess() {
		return gaPatternLanguage.getAggregatorExpressionAccess();
	}
	
	public ParserRule getAggregatorExpressionRule() {
		return getAggregatorExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
