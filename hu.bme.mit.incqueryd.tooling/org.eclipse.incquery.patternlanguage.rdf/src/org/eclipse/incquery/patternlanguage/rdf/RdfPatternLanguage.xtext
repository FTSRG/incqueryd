grammar org.eclipse.incquery.patternlanguage.rdf.RdfPatternLanguage with org.eclipse.incquery.patternlanguage.PatternLanguage

import "http://www.eclipse.org/incquery/patternlanguage/PatternLanguage" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate rdfPatternLanguage "http://www.eclipse.org/incquery/patternlanguage/rdf/RdfPatternLanguage"

RdfPatternModel returns core::PatternModel:
	{RdfPatternModel}
	base=Base?
	prefixes+=Prefix*
	patterns+=Pattern*;

Base:
	'base' iri=RawIri
;

Prefix:
	'prefix' name=ID ':' iri=RawIri
;

Iri:
	(prefix=[Prefix] ':')? iri=RawIri
;

Constraint returns core::Constraint:
	CompareConstraint | PatternCompositionConstraint
	| TypeConstraint
	| RdfPathExpressionConstraint
	| RdfCheckConstraint
;

RdfCheckConstraint:
	{RdfCheckConstraint}
	'check' '(' (variables+=VariableReference ',')* expression=STRING ')'
;

RdfPathExpressionConstraint:
	pathExpression=PathExpressionTail '(' src=VariableReference ',' dst=ValueReference ')'
;

TypeConstraint:
	type=Type '(' var=VariableReference ')'
;

Type returns core::EntityType:
	{RdfClass}
	class=Iri
;

RefType returns core::RelationType:
	{RdfProperty}
	property=Iri
;

LiteralValueReference returns core::ValueReference:
	IntValue | StringValue | DoubleValue | BoolValue // Copied from PatternLanguage
	| RdfLiteral // Additions
;

RdfLiteral:
	lexicalForm=STRING (('^^' datatype=Iri) | ('@' language=ID))
;

RawIri returns ecore::EString:
	ID | ESCAPED_IRI
;

terminal ESCAPED_IRI:
	'<' ('\\>' | !'>')* '>'
;