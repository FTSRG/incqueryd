/*
* generated by Xtext
*/
package hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.incqueryd.arch.language.services.ArchLanguageGrammarAccess;

public class ArchLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private ArchLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr.internal.InternalArchLanguageParser createParser() {
		hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr.internal.InternalArchLanguageParser result = new hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr.internal.InternalArchLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
					put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
					put(grammarAccess.getRecipeImportAccess().getGroup(), "rule__RecipeImport__Group__0");
					put(grammarAccess.getInfrastructureMappingAccess().getGroup(), "rule__InfrastructureMapping__Group__0");
					put(grammarAccess.getInfrastructureMappingAccess().getGroup_4(), "rule__InfrastructureMapping__Group_4__0");
					put(grammarAccess.getCacheRoleAccess().getGroup(), "rule__CacheRole__Group__0");
					put(grammarAccess.getConfigurationAccess().getRecipeImportsAssignment_0(), "rule__Configuration__RecipeImportsAssignment_0");
					put(grammarAccess.getConfigurationAccess().getMappingsAssignment_1(), "rule__Configuration__MappingsAssignment_1");
					put(grammarAccess.getRecipeImportAccess().getImportURIAssignment_1(), "rule__RecipeImport__ImportURIAssignment_1");
					put(grammarAccess.getInfrastructureMappingAccess().getMachineAssignment_1(), "rule__InfrastructureMapping__MachineAssignment_1");
					put(grammarAccess.getInfrastructureMappingAccess().getRolesAssignment_3(), "rule__InfrastructureMapping__RolesAssignment_3");
					put(grammarAccess.getInfrastructureMappingAccess().getRolesAssignment_4_1(), "rule__InfrastructureMapping__RolesAssignment_4_1");
					put(grammarAccess.getMachineAccess().getIpAssignment(), "rule__Machine__IpAssignment");
					put(grammarAccess.getReteRoleAccess().getNodeRecipeAssignment(), "rule__ReteRole__NodeRecipeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr.internal.InternalArchLanguageParser typedParser = (hu.bme.mit.incqueryd.arch.language.ui.contentassist.antlr.internal.InternalArchLanguageParser) parser;
			typedParser.entryRuleConfiguration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ArchLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ArchLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
