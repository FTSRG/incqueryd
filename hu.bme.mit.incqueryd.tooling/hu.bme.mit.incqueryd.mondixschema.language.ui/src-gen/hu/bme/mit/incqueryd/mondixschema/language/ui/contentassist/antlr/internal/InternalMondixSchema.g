/*
* generated by Xtext
*/
grammar InternalMondixSchema;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.incqueryd.mondixschema.language.services.MondixSchemaGrammarAccess;

}

@parser::members {
 
 	private MondixSchemaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MondixSchemaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSchema
entryRuleSchema 
:
{ before(grammarAccess.getSchemaRule()); }
	 ruleSchema
{ after(grammarAccess.getSchemaRule()); } 
	 EOF 
;

// Rule Schema
ruleSchema
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaAccess().getGroup()); }
(rule__Schema__Group__0)
{ after(grammarAccess.getSchemaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelation
entryRuleRelation 
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationAccess().getGroup()); }
(rule__Relation__Group__0)
{ after(grammarAccess.getRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getGroup()); }
(rule__Column__Group__0)
{ after(grammarAccess.getColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Schema__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__0__Impl
	rule__Schema__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getSchemaAction_0()); }
(

)
{ after(grammarAccess.getSchemaAccess().getSchemaAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__1__Impl
	rule__Schema__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getSchemaKeyword_1()); }

	'schema' 

{ after(grammarAccess.getSchemaAccess().getSchemaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__2__Impl
	rule__Schema__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getNameAssignment_2()); }
(rule__Schema__NameAssignment_2)
{ after(grammarAccess.getSchemaAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getRelationsAssignment_3()); }
(rule__Schema__RelationsAssignment_3)*
{ after(grammarAccess.getSchemaAccess().getRelationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Relation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRelationAction_0()); }
(

)
{ after(grammarAccess.getRelationAccess().getRelationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__1__Impl
	rule__Relation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRelationKeyword_1()); }

	'relation' 

{ after(grammarAccess.getRelationAccess().getRelationKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__2__Impl
	rule__Relation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getNameAssignment_2()); }
(rule__Relation__NameAssignment_2)
{ after(grammarAccess.getRelationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__3__Impl
	rule__Relation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getRelationAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__4__Impl
	rule__Relation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getColumnsAssignment_4()); }
(rule__Relation__ColumnsAssignment_4)*
{ after(grammarAccess.getRelationAccess().getColumnsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getRelationAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Column__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getColumnAction_0()); }
(

)
{ after(grammarAccess.getColumnAccess().getColumnAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getColumnKeyword_1()); }

	'column' 

{ after(grammarAccess.getColumnAccess().getColumnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameAssignment_2()); }
(rule__Column__NameAssignment_2)
{ after(grammarAccess.getColumnAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Schema__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__RelationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getRelationsRelationParserRuleCall_3_0()); }
	ruleRelation{ after(grammarAccess.getSchemaAccess().getRelationsRelationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__ColumnsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getColumnsColumnParserRuleCall_4_0()); }
	ruleColumn{ after(grammarAccess.getRelationAccess().getColumnsColumnParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


