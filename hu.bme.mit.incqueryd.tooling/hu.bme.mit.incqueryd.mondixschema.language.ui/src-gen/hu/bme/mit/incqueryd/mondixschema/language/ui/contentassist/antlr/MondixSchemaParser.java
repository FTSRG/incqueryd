/*
* generated by Xtext
*/
package hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.incqueryd.mondixschema.language.services.MondixSchemaGrammarAccess;

public class MondixSchemaParser extends AbstractContentAssistParser {
	
	@Inject
	private MondixSchemaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal.InternalMondixSchemaParser createParser() {
		hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal.InternalMondixSchemaParser result = new hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal.InternalMondixSchemaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getColumnTypeAccess().getAlternatives(), "rule__ColumnType__Alternatives");
					put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getColumnAccess().getGroup_3(), "rule__Column__Group_3__0");
					put(grammarAccess.getSchemaAccess().getNameAssignment_2(), "rule__Schema__NameAssignment_2");
					put(grammarAccess.getSchemaAccess().getRelationsAssignment_3(), "rule__Schema__RelationsAssignment_3");
					put(grammarAccess.getRelationAccess().getNameAssignment_2(), "rule__Relation__NameAssignment_2");
					put(grammarAccess.getRelationAccess().getColumnsAssignment_4(), "rule__Relation__ColumnsAssignment_4");
					put(grammarAccess.getColumnAccess().getNameAssignment_2(), "rule__Column__NameAssignment_2");
					put(grammarAccess.getColumnAccess().getTypeAssignment_3_1(), "rule__Column__TypeAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal.InternalMondixSchemaParser typedParser = (hu.bme.mit.incqueryd.mondixschema.language.ui.contentassist.antlr.internal.InternalMondixSchemaParser) parser;
			typedParser.entryRuleSchema();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MondixSchemaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MondixSchemaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
