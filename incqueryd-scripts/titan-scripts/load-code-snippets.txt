conf = new BaseConfiguration();
conf.setProperty("storage.backend","cassandrathrift");
conf.setProperty("storage.hostname","vcl0");
g = TitanFactory.open(conf);
g.createKeyIndex("type", Vertex.class);
g.stopTransaction(SUCCESS);

cd ~/data/faunus

export JAVA_OPTIONS="-Xms3G -Xmx3G"
export HADOOP_CONF=/usr/local/hadoop/conf
bin/gremlin.sh


export JAVA_OPTIONS="-Xms3G -Xmx3G"
export HADOOP_CONF=
bin/gremlin.sh


// SIZE = 1

conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_1.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;

// SIZE = 4096

conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_4096.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;











//// FOR FAUNUS GRAPHSON FILES

// FAUNUS GRAPHSON FILE, SIZE = 1

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/testBig_User_1.faunus-graphson', 'testBig_User_1.faunus-graphson');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_1.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;

// FAUNUS GRAPHSON FILE, SIZE = 1024

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/testBig_User_1024.faunus-graphson', 'testBig_User_1024.faunus-graphson');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_1024.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;

// FAUNUS GRAPHSON FILE, SIZE = 2048

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/testBig_User_2048.faunus-graphson', 'testBig_User_2048.faunus-graphson');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_2048.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;

// FAUNUS GRAPHSON FILE, SIZE = 4096

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/testBig_User_4096.faunus-graphson', 'testBig_User_4096.faunus-graphson');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_4096.faunus-graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;






//// FOR SEQUENCE FILES

// SEQUENCE FILE, SIZE = 1

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/sequence_files/testBig_User_1.seq', 'testBig_User_1.seq');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_1.seq/job-0');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl0,vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;

// SEQUENCE FILE, SIZE = 4096

hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/sequence_files/testBig_User_4096.seq', 'testBig_User_4096.seq');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_4096.seq/job-0');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl0,vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;





hdfs.ls();
hdfs.copyFromLocal('/home/meres/data/testBig_User_4096.graphson', 'testBig_User_4096.graphson');
hdfs.ls();
conf = new Configuration();
conf.setStrings('faunus.graph.input.format', 'com.thinkaurelius.faunus.formats.graphson.GraphSONInputFormat');
conf.setStrings('faunus.input.location', 'testBig_User_4096.graphson');
conf.setStrings('faunus.graph.output.titan.storage.hostname', 'vcl0,vcl1,vcl3');
g = FaunusFactory.open('/home/meres/titan-scripts/incqueryd-cassandra-load.properties', conf);
g._;









conf = new BaseConfiguration();
conf.setProperty("storage.backend","cassandrathrift");
conf.setProperty("storage.hostname","vcl1,vcl3");
g = TitanFactory.open(conf);
g.E("edgetype", "<LABEL>").bothV;



